# Inventory Management Integrated
# 22.02.2025

import tkinter as tk
from tkinter import messagebox, PhotoImage, scrolledtext, font
import time

from datetime import datetime

inventories = {'office 1': {'apple': '3', 'banana': '2'}}
inventory_name = ''# Stores current active inventory/the one being edited

class Asset: 
    def __init__(self, asset_id, name, quantity, value):
        self.asset_id = asset_id
        self.name = name
        self.quantity = quantity
        self.value = value
        
    def edit_quantity(self, new_quantity):
        self.quantity = new_quantity
        print('Object', self.name, 'quantity changed to', self.quantity)
    
    def edit_value(self, new_value):
        self.value = new_value
        print('Object', self.name, 'value changed to', new_value)


# class inventory_manager(): 
    # def __init__(self, inventory_name):
        # self.name = inventory_name
        # self.inventory = {}
        # print(inventory_name, 'contains\n', self.inventory)

    # def add_asset(self, inventory_name, asset):
        # self.inventory.append(asset)

    # def remove_asset(self, asset):
        # self.inventory.remove(asset)


class inventories_manager: 
    def __init__(self):
        self.counter = 0 # tracks how many inventories are active in the dictionary
        self.new_inventory_ID = 0
    
    def add_inventory(self, inventories, inventory_name, inventory_flag):
        self.new_inventory_ID += 1
        self.counter += 1
        if inventory_flag == 0: # Name doesn't exists so new inventory CAN be created
            interface.execution_note(function_name="\'Add inventory\'", execution_flag=True)
            inventories[inventory_name] = {}
        elif inventory_flag == 1: # Name already exists, cannot create new inventory
            interface.execution_note(function_name="\'Add inventory\'", execution_flag=False)

    def remove_inventory(self, inventories, inventory_name, inventory_flag):
        if len(inventories) == 0:
            interface.execution_note(function_name="\'Remove inventory\'", execution_flag=False)
            interface.execution_note_box.configure(state="normal")
            interface.execution_note_box.insert(tk.END, "\nNo inventories exist\n")
            interface.execution_note_box.configure(state="disabled")
            return 0
        if inventory_flag == 0: # Name doesnt exist so cannot be removed
            interface.execution_note(function_name="\'Remove inventory\'", execution_flag=False)
        elif inventory_flag == 1: # Name does exist so can be removed
            interface.execution_note(function_name="\'Remove inventory\'", execution_flag=True)
            del inventories[inventory_name] # Remove inventory from data
        self.counter -= 1

    def display_inventory(self, inventories, inventory_name, inventory_flag):
        # Check if any inventories exist
        if len(inventories) == 0:
            interface.execution_note(function_name="\'Display inventory\'", execution_flag=False)
            interface.execution_note_box.configure(state="normal")
            interface.execution_note_box.insert(tk.END, "\nNo inventories exist\n")
            interface.execution_note_box.configure(state="disabled")
            return 0
        if inventory_flag == 0: # Name doesnt exist so cannot be displayed
            interface.execution_note(function_name="\'Display inventory\'", execution_flag=False)
            ##### OPTION TO ADD INVENTORY INSTEAD
        elif inventory_flag == 1: # Name does exist so can be displayed
            interface.execution_note(function_name="\'Display inventory\'", execution_flag=True)
            # Print inventory to inventory box on the GUI
            interface.inventory_box.configure(state="normal")
            interface.inventory_box.insert(tk.END, "--------------------------------------")
            interface.inventory_box.insert(tk.END, "\n" + inventory_name + "\n \n")
            for key, value in inventories[inventory_name].items():
                interface.inventory_box.insert(tk.END, key + ": " + value + "\n")
            interface.inventory_box.insert(tk.END, "--------------------------------------\n")
            interface.inventory_box.configure(state="disabled")
        self.counter -= 1
    
    def display_all(self, inventories):
            if len(inventories) == 0:
                interface.inventory_box.insert(tk.END, "EMPTY\n")
                return 0
        # Display all inventories
            for name, inventory in inventories.items():
                interface.inventory_box.insert(tk.END, name + ":\n")
                # print("\ninventory:", name)
                for key in inventory:
                    interface.inventory_box.insert(tk.END, "\t- " + key + ":" + inventory[key] + '\n')

    def add_item(self, inventory_name, inventories):
        # Adds new item to a given inventory
        new_item_name = input('Enter name of item to add: ').strip()
        quantity = int(input('Enter quantity of item: '))
        # Check if item already exists
        for key in inventories[inventory_name]:
            if key == new_item_name:
                # Item already exists in that inventory
                print('Item already exists in that inventory, edit quantity instead?')

        inventories[inventory_name][new_item_name] = quantity 
        print(inventories)
    
    def remove_item(self, inventory_name, inventories):
        # This function removes an item from a given inventory
        # Get item name & verify it exists in the given inventory
        item_flag = False 
        while item_flag == False:
            item_name = input('Enter name of item to remove: ').strip()
            for key in inventories[inventory_name]:
                if key == item_name:
                    # Item exists in that inventory
                    item_flag = True
            if item_flag == False:
                # Item not present in inventory
                print('Item not present')
        del inventories[inventory_name][item_name]
        print(inventories)

    def edit_quantity(self, inventory_name, inventories):
        pass
        # Validate item exists in inventory
        #### inventories[inventory_name][new_item_name] = quantity 
                
manager = inventories_manager()

def validate_inventory_name(inventory_name, inventories):
    # Function checks the 'inventories' dictionary to see if the dicntionary exists
    # If function returns true, name already exists, 
    # if it returns false, name doesnt exist
    name_check = False 
    for key, value in inventories.items():
        if key == inventory_name:
            name_check = True 
    if name_check == False:
        # Name doesnt exist
        print('Name doesnt exist')
        return 0
    elif name_check == True:
        # Name does exist
        print('Name does exist')
        return 1

# ===============================================================================================================================

class GUI(tk.Tk):
    def __init__(self):
        super().__init__()
        # Set up main application window
        self.title("Inventory Management System")
        self.geometry("1000x666")

        title_font = font.Font(weight="bold", size=16, family="Comic Sans MS")

        # Create title label widget
        self.label = tk.Label(self, text="Inventory Management System", font=title_font)
        self.label.place(relx=0.34, rely=0, relwidth=0.33, relheight=0.1)
        ### self.label.pack(pady=30, anchor=tk.N)

        # Read BAE logo image and format to the right size
        self.BAES_logo = PhotoImage(file="C:/Users/alexa/OneDrive/Documents/B&FC Year 1/Programming Fundamentals/Assignment 2 inventory management system/bae-systems-logo.png")
        self.BAES_logo = self.BAES_logo.subsample(3,4)

        # Create label to display BAE logo & add to GUI 
        self.BAE_logo_label = tk.Label(self, image=self.BAES_logo).place(relx=0.67,rely=0, relwidth=0.33, relheight=0.1)
        # pack(anchor=tk.NE)

        button_text = font.Font(font='Helvetica', size=10)

        # Create 'add inventory' button widget
        self.add_inventory_btn = tk.Button(self, text="Add inventory", font=button_text, command=lambda:self.add_inventory_clicked(inventories))
        self.add_inventory_btn.place(relx=0.04, rely= 0.12, relwidth=0.26)

        # Create 'Remove inventory' button widget
        self.remove_inventory_btn = tk.Button(self, text="Remove inventory", font=button_text, command=lambda:self.remove_inventory_clicked(inventories))
        self.remove_inventory_btn.place(relx=0.04, rely=0.21, relwidth=0.262)

        # Create 'Display inventory' button widget
        self.display_inventory_btn = tk.Button(self, text="Display inventory", font=button_text, command=lambda:self.display_inventory_clicked(inventories))
        self.display_inventory_btn.place(relx=0.04, rely = 0.30, relwidth=0.262)

        # Create 'add item' button widget
        self.add_item_btn = tk.Button(self, text='Add item to inventory', font=button_text, command=lambda: self.add_item_clicked(inventories))
        self.add_item_btn.place(relx=0.04, rely=0.39, relwidth=0.262)

        # Create 'remove item' button widget
        self.remove_item_btn = tk.Button(self, text='Remove item from inventory', font=button_text, command=lambda: self.remove_item_clicked(inventories))
        self.remove_item_btn.place(relx=0.04, rely=0.48, relwidth=0.262)

        # Create 'display all' button widget
        self.display_all_btn = tk.Button(self, text="Display all", font = button_text, command=lambda: self.display_all_clicked(inventories))
        self.display_all_btn.place(relx=0.04, rely=0.57, relwidth=0.262)

        # Create 'logout button' and add to UI 
        self.logout_btn = tk.Button(self, text="Logout", font=button_text, command=self.logout).place(relx=0, rely=0)

        # Create Scrolling text box for execution messages
        self.execution_note_box = scrolledtext.ScrolledText(self, wrap=tk.WORD, width=40, height=10)
        self.execution_note_box.configure(state ='disabled')
        self.execution_note_box.place(relx=0.005, rely=0.69, relwidth=0.33, relheight=0.3)
        # Set focus to the text area
        self.execution_note_box.focus()

        # Create font style for label for execution box - what a mouthful! 
        execution_box_label_font = font.Font(family="Comic Sans MS", size=12, weight="bold")

        # Create label for execution box
        self.execution_box_label = tk.Label(self, text="Command state updates",justify="center", font=execution_box_label_font)
        self.execution_box_label.place(relx=0, rely=0.65, relheight=0.05, relwidth=0.33)

        # Create Scrolling text box for displaying inventories
        self.inventory_box = scrolledtext.ScrolledText(self, wrap=tk.WORD, width=10, height=40)
        self.inventory_box.configure(state ='disabled')
        self.inventory_box.place(relx=0.67, rely=0.09, relwidth=0.33, relheight=0.9)
        # Set focus to the text area 
        self.inventory_box.focus()

# ============================================================================================================================

    def logout(self):
        # Close the application window 
        response = messagebox.askyesno("Logout", "Are you sure you want to logout?")
        if response:
            ##### NEED TO WRITE DATA TO FILE
            self.destroy() 
    
    def add_inventory_clicked(self, inventories):
        # Get inventory name to add
        inventory_name = fetch_inventory_name(purpose='add')
        # self.execution_note(function_name="\'Add inventory\'")
        print(inventories)

    def remove_inventory_clicked(self, inventories):
        # Get inventory name to add
        inventory_name = fetch_inventory_name(purpose='remove')
        # self.execution_note(function_name="\'Remove inventory\'", execution_flag=True)

    def display_inventory_clicked(self, inventories):
        name_screen = fetch_inventory_name(purpose='display')
        # self.print_inventory(inventory_name, inventories)
        # self.execution_note(function_name="\'Display inventory\'")

    def display_all_clicked(self, inventories):
        self.inventory_box.configure(state="normal")
        manager.display_all(inventories)
        self.inventory_box.configure(state="disabled")
        self.execution_note(function_name="\'Display all\'", execution_flag=True)
    
    def add_item_clicked(self, inventories):
        item_screen = fetch_item_name(purpose='add')
        # self.execution_note(function_name="\'Add item\'", execution_flag=True)

    def remove_item_clicked(self, inventories):
        name_screen = fetch_item_name(purpose='remove')
        self.execution_note(function_name="\'Remove item\'")

    def execution_note(self, function_name, execution_flag):
        # Displays execution note in execution note box, depending on 
        # if the fucntion sucessfully executed or not
        current_time = datetime.now()
        if execution_flag == True:
            self.execution_note_box.configure(state = "normal")
            self.execution_note_box.insert(tk.END, current_time)
            self.execution_note_box.insert(tk.END,"\nFunction:" + function_name + " SUCCESS.\n")
            self.execution_note_box.insert(tk.END,"==================================================\n")
            self.execution_note_box.configure(state = "disabled")
        elif execution_flag == False:
            self.execution_note_box.configure(state="normal")
            self.execution_note_box.insert(tk.END, current_time)
            self.execution_note_box.insert(tk.END,"\nFunction:" + function_name + " FAIL.\n")
            self.execution_note_box.insert(tk.END,"==================================================\n")
            self.execution_note_box.configure(state = "disabled")
            # Print reason for failure - depends on the function being executed
            if function_name == 'add':
                interface.execution_note_box.configure(state = "normal") # Open execution box - can be written to
                interface.execution_note_box.insert(tk.END, "\nInventory already exists")
                interface.execution_note_box.configure(state="disabled") # Close execution box - READ ONLY MODE
            elif function_name == 'remove':
                interface.execution_note_box.configure(state="normal")
                interface.execution_note_box.insert(tk.END, "\nInventory does not exist\n")
                interface.execution_note_box.configure(state="disabled")
            elif function_name == 'display':
                interface.execution_note_box.configure(state="normal")
                interface.execution_note_box.insert(tk.END, "\nInventory does not exist\n")
                interface.execution_note_box.configure(state="disabled")


        # Give reason for execution

    def print_inventory(self, inventory_name, inventories):
        name = inventory_name
        self.inventory_box.configure(state="normal")
        for key,value in inventories.items():
            print(key, value)
            # self.inventory_box.insert(tk.END, key + ":" + value)
        self.inventory_box.configure(state="disabled")

# =======================================================================================================================

def fetch_inventory_name(purpose):
    root = tk.Tk()
    # Make storage area for inventory name
    inv_name = tk.StringVar()
    # initialise the screen
    root.title('Enter Inventory name')
    root.geometry("300x200")

    # Create object with bold font 
    bold_font = font.Font(weight="bold", size=13, font="Helvetica")

    # Add label for purpose of asking for name (i.e. is it to add/remove/display inventory)
    purpose_label = tk.Label(root, text="Enter name of inventory to " + purpose, font=bold_font, justify="center")
    purpose_label.pack(fill='x', pady=5, expand=True)
    # self.purpose_label.grid(row=0,column=0,pady=3)

    # Add entry for inventory name
    name_entry = tk.Entry(root, textvariable=inv_name, font=("Comic Sans", 13), justify="center")
    name_entry.pack(expand=False)
    name_entry.focus()

    # submit button
    submit_button = tk.Button(root, text = "Submit", command = lambda:submit_inventory_name(inventory_name, name_entry, inv_name, root, purpose=purpose), justify="center")
    submit_button.pack(expand=True)

# ======================================================================================================
    
def submit_inventory_name(inventory_name, name_entry, inv_name, root, purpose):
    inventory_name=name_entry.get()
    inv_name.set("")
    print("The name is: " + inventory_name)
    root.destroy()
    # inventory_name = input("Inventory name: ").strip()
    inventory_flag = validate_inventory_name(inventory_name, inventories) # Returns 0 if name doesnt exists and 1 if name does exist
    if purpose == 'add':
        manager.add_inventory(inventories, inventory_name, inventory_flag)
    elif purpose == 'remove':
        manager.remove_inventory(inventories, inventory_name, inventory_flag)
    elif purpose == 'display':
        manager.display_inventory(inventories, inventory_name, inventory_flag)
    return inventory_name

# ======================================================================================================
    
def fetch_item_name(purpose):
    root = tk.Tk()
    # Make storage area for inventory name
    item_entry_string = tk.StringVar()
    quantity_string = tk.IntVar()
    # initialise the screen
    root.title('Enter Inventory name')
    root.geometry("300x200")

    # configure the grid
    root.columnconfigure(0, weight=1)
    root.columnconfigure(1, weight=3)

    # Create object with bold font 
    bold_font = font.Font(weight="bold", size=13, font="Helvetica")

    # Add label for purpose of asking for name (i.e. is it to add/remove/display inventory)
    purpose_label = tk.Label(root, text="Enter name of inventory to " + purpose, font=bold_font, justify="center")
    purpose_label.grid(row=0, column=0, columnspan=2, pady=5)
    # self.purpose_label.grid(row=0,column=0,pady=3)

    # Add label for item name entry
    item_name_label = tk.Label(root, text="Item name:", justify="right")
    item_name_label.grid(row=1, column=0, padx=5, pady=5)

    # Add label for quantity entry
    item_name_label = tk.Label(root, text="Quantity:", justify="right")
    item_name_label.grid(row=2, column=0, padx=5, pady=5)

    # Add entry for item name
    item_entry = tk.Entry(root, textvariable=item_entry_string, font=("Comic Sans", 13))
    item_entry.grid(row=1, column=1, padx=5, pady=5)
    item_entry.focus()

    # Add entry for quantity value 
    quantity_entry = tk.Entry(root, textvariable=quantity_string, font=("Comic Sans", 13))
    quantity_entry.grid(row=2, column=1, padx=5, pady=5)

    # submit button
    submit_button = tk.Button(root, text = "Submit", command = lambda:submit_item_name(inventory_name, item_entry_string, item_entry, quantity_string, quantity_entry, root, purpose=purpose), justify="center")
    submit_button.grid(row=3, column=0, columnspan=2, padx=5, pady=5)
    
# ======================================================================================================

def submit_item_name(inventory_name, item_entry_string, item_entry, quantity_string, quantity_entry, root, purpose):
    item_name=item_entry.get()
    quantity=quantity_entry.get()
    item_entry_string.set("")
    quantity_string.set("")
    # Validate inputs
    print("The item is: " + item_name)
    print("Quantity is:" + quantity)
    root.destroy()
# =======================================================================================================
    
# Run the application
interface = GUI()
interface.mainloop()
